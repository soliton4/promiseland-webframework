
promiseland.addLocalFrameName("client");
  
var ServerFrame = class extends promiseland.FrameBaseClass {
  name: "server"
};


/*var ServerProfile = () {
  this.name = (){
    return "server";
  };
  this.find = (){
    return this.connection;
  };
};
ServerProfile.prototype = new promiseland.ProfileBaseClass();*/


var serverFrame = new ServerFrame();
promiseland.addFrame(serverFrame);
    

      



/*var ServerConnection = (socket) {
  this.socket = socket;
  var self = this;
  socket.on("pl", (data){
    self.emit("data", data);
  });
  this.send = (data){
    socket.emit("pl", data);
  };
};
ServerConnection.prototype = new promiseland.ConnectionBaseClass();

var serverProfile = new ServerProfile();
promiseland.addProfile(serverProfile);
*/

var serverConnection;

var connectPs = new Promise;

var socket = io.connect();
socket.on("connect", function(){
  
  
  serverConnection = new serverFrame.ConnectionBaseClass();
  serverConnection.send = (data){
    socket.emit("pl", data);
  };
  serverFrame.newConnection(serverConnection);

  socket.on("disconnect", function(){
    serverConnection.disconnect();
  });

  socket.on("pl", function(data){
    serverConnection.data(data);
  });
  
  try{
    connectPs.resolve();
  }catch(e){
    // in case its already resolved
  };

  
  /*var connection = new ServerConnection(socket);
  serverProfile.connection = connection;
  serverProfile.emit("connection", connection);*/
  
});

socket.on("disconnect", function(){
  //serverProfile.connection.emit("disconnect");
  //serverProfile.connection = undefined;
  serverConnection.disconnect();
});

return {
  connectPs: connectPs
};