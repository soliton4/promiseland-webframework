
promiseland.addLocalFrameName("client");
  
var ServerFrame = class extends promiseland.FrameBaseClass {
  name: "server"
};

var ServerNoAuthFrame = class extends promiseland.FrameBaseClass {
  name: "serverNoAuth"
};



var serverFrame = new ServerFrame();
promiseland.addFrame(serverFrame);
    
var serverNoAuthFrame = new ServerNoAuthFrame();
promiseland.addFrame(serverNoAuthFrame);



var serverConnection;

var connectPs = new Promise;

var authPs = new Promise;

var socket = io.connect();
socket.on("connect", function(){
  
  
  serverConnection = new serverFrame.ConnectionBaseClass();
  serverConnection.send = (data){
    socket.emit("pl", data);
  };
  serverFrame.newConnection(serverConnection);

  socket.on("disconnect", function(){
    serverConnection.disconnect();
  });

  socket.on("pl", function(data){
    serverConnection.data(data);
  });
  
  try{
    connectPs.resolve();
  }catch(e){
    // in case its already resolved
  };

  
  authConnection = new serverFrame.ConnectionBaseClass();
  authConnection.send = (data){
    socket.emit("a", data);
  };
  serverNoAuthFrame.newConnection(authConnection);

  socket.on("disconnect", function(){
    authConnection.disconnect();
  });

  socket.on("a", function(data){
    authConnection.data(data);
  });
  
  
});

socket.on("disconnect", function(){
  serverConnection.disconnect();
});

return {
  connectPs: connectPs,
  authPs: authPs
};