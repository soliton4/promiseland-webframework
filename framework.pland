var express = require("express");
var http = require("http");
var fs = require("fs");
var socketIo = require("socket.io");

var expressSession = require "express-session";
var CookieParser = require 'cookie-parser';

var htmlStr = "<html>
  <head>
    {{css}}
    <!-- socket.io -->
      <script src='/socket.io/socket.io.js'></script>
    <!-- require -->
      <script src='/requirejs/require.js'></script>
    <script>
      require.config({{requirejsconfig}});
    </script>
    
    <script>
      require(['frameworkClient/client'], function(clientPs){
        clientPs.then(function(client){
          {{require}};
          client.getConnectPs().then(function(){
            {{requireconnect}}
          });
        });
      });
    </script>
    
  </head>
  <body>
  </body>
</html>";

class Framework {
  constructor: (parConfig){
    parConfig = parConfig || {};
    
    this.app = express();
    
    this.http = http.createServer(this.app);
    this.config = parConfig;
    var self = this;
    
    var session;
    var store;
    if (this.config.session === true){
      var Store = expressSession.MemoryStore;
      store = new Store();
      
      session = expressSession({
        secret: "promiseland-webframework-secretxxx", // create your own session if you want to make a descent app
        resave: false,
        saveUninitialized: true,
        store: store
      });
      
    }else if(this.config.session){
      session = this.config.session;
      
    };
    
    if (session){
      var cookieParser = CookieParser();
      
      this.app.use(cookieParser);
      
      this.app.use(session);
    };
    
    this.app.get("/", function(req, res){
      res.setHeader('Content-Type', "text/html");
      var s = htmlStr;
      
      var cssStr = "";
      if (self.config.css && self.config.css.length){
        if (typeof self.config.css === "string"){
          cssStr = "<link type = \"text/css\" rel=\"stylesheet\" href=\"" + self.config.css + "\">";
        }else{
          var i;
          for(i = 0; i < self.config.css.length; ++i){
            cssStr += "<link type = \"text/css\" rel=\"stylesheet\" href=\"" + self.config.css[i] + "\">";
          };
        };
      };
      s = s.replace("{{css}}", cssStr);
      
      var loadStr = "";
      if (self.config.load && self.config.load.length){
        if (typeof self.config.load === "string"){
          loadStr = "require(['" + self.config.load + "'], function(){});";
        }else{
          loadStr = "require([";
          var i;
          for(i = 0; i < self.config.load.length; ++i){
            if (i){
              loadStr += ", ";
            };
            loadStr += "'" + self.config.load[i] + "'";
          };
          loadStr += "], function(){});";
        };
      };
      s = s.replace("{{require}}", loadStr);
      
      
      var connectLoadStr = "";
      if (self.config.loadOnConnect && self.config.loadOnConnect.length){
        if (typeof self.config.loadOnConnect === "string"){
          connectLoadStr = "require(['" + self.config.loadOnConnect + "'], function(){});";
        }else{
          connectLoadStr = "require([";
          var i;
          for(i = 0; i < self.config.loadOnConnect.length; ++i){
            if (i){
              connectLoadStr += ", ";
            };
            connectLoadStr += "'" + self.config.loadOnConnect[i] + "'";
          };
          connectLoadStr += "], function(){});";
        };
      };
      s = s.replace("{{requireconnect}}", connectLoadStr);
      
      
      var requireConfig;
      if (self.config.requireConfig){
        requireConfig = self.config.requireConfig;
      };
      if (!requireConfig){
        requireConfig = {};
      };
      if (!requireConfig.packages){
        requireConfig.packages = [
          {
            name: 'promiseland',
            main: 'promiseland',
            location: 'promiseland'
          }
        ];
      }else{
        var i = 0;
        var found = false;
        for(i = 0; i < requireConfig.packages.length; ++i){
          if (requireConfig.packages[i].name == "promiseland"){
            found = true;
            requireConfig.packages[i].main = "promiseland";
            requireConfig.packages[i].location = "promiseland";
          };
        };
        if (!found){
          requireConfig.packages.push({
            name: 'promiseland',
            main: 'promiseland',
            location: 'promiseland'
          });
        };
      };
      s = s.replace("{{requirejsconfig}}", JSON.stringify(requireConfig));
      
      res.end(s);
    });
    
    this.app.use("/promiseland", express["static"](this.config.promiselandPathName || promiseland.getPromiselandPathName()));
    this.app.use("/requirejs", express["static"](this.config.requirejsPathName || (__dirname + "/requirejs")));
    this.app.use("/frameworkClient", express["static"](this.config.frameworkClientPathName || (__dirname + "/frameworkClient")));
    
    if (self.config.dirs){
      for (i = 0; i < self.config.dirs.length; ++i){
        var d = self.config.dirs[i];
        this.app.use(d.client, express["static"](d.server));
      };
    };
    
    
    promiseland.addLocalFrameName("server");
    promiseland.addLocalFrameName("serverNoAuth");
    
    
    
    var ClientFrame = class extends promiseland.FrameBaseClass {
      name: "client"
      
    };
    
    
    var clientFrame = new ClientFrame();
    promiseland.addFrame(clientFrame);
    this.clientFrame = clientFrame;
    
    var mainio = socketIo.listen(this.http);
    
    if (session){
      mainio.use(function(socket, next) {
        var req = socket.handshake;
        var res = {};
        cookieParser(req, res, function(err) {
          if (err) return next(err);
          session(req, res, next);
        });
      });
    };


    
    mainio.on('connection', function (socket) {
      
      console.log("Session: ", socket.handshake.session);
      
      var connection = new clientFrame.ConnectionBaseClass();
      if (self.config.requireAuth){
        connection.restrictLocalFrames = true;
      };
      connection.send = (data){
        socket.emit("pl", data);
      };
      clientFrame.newConnection(connection);
      
      socket.on("disconnect", function(){
        connection.disconnect();
      });
      
      socket.on("pl", function(data){
        connection.data(data);
      });
      
      
      var authConnection = new clientFrame.ConnectionBaseClass();
      authConnection.restrictLocalFrames = true;
      authConnection.addLocalFrameAccess("serverNoAuth");
      
      authConnection.session.setAuth = (parIsAuth){
        if (parIsAuth){
          connection.addLocalFrameAccess("server");
        }else{
          connection.removeLocalFrameAccess("server");
        };
      };
      console.log(authConnection.session);
      
      authConnection.send = (data){
        socket.emit("a", data);
      };
      clientFrame.newConnection(authConnection);
      
      socket.on("disconnect", function(){
        authConnection.disconnect();
      });
      
      socket.on("a", function(data){
        authConnection.data(data);
      });
      
      
    });
    this.socketio = mainio;
    
  },
  
  listen: (port){
    return this.http.listen(port);
  }
  
};

return Framework;
