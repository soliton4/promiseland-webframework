<{  __promiseLandModule: true }>;
  
var errorMsg = extra.errorMsg;
var classSystem;
(){
  classSystem = (*extra.classSystemPs).classSystem;
}();

  
/*
  internal representation of a instance
  it always contains a non temporary and a life line
  the life line is a empty function if its not a tracked type to make things easier
  its possible to get a representation of a desired type by calling 
    getInstanceAsType
  it will raise a typeMissmatch if the instance can not be converted to the desired type
  
  you must call .track() when you dont use it anymore !!!
*/
class DynInstance {
  constructor: (parType, parInstance){
    this.extraTracks = [];
    if (!parType){
      parType = classSystem.getTypeFromInstance(parInstance);
    };
    this.track = (){};
    if (classSystem.isVar(parType)){
      this.instance = parInstance;
      this.type = parType;
      return;
    };
    
    var passedType = classSystem.getTypeFromInstance(parInstance);
    if (classSystem.isTemporaryTrackedClass(passedType)){
      this.instance = parInstance[0];
      this.track = parInstance[1];
      this._isTrack = true;
      this.type = classSystem.getClassFromTemporaryTracked(passedType);
      
    }else if (classSystem.isTrackedClass(passedType)){
      this.instance = parInstance;
      this.track = classSystem.getTrack(parInstance);;
      this._isTrack = true;
      this.type = passedType;
      
    }else{
      this.instance = parInstance;
      this.track = (){};
      this.type = passedType;
      
    };
    
  },
  
  getInternalId: (){
    return classSystem.getInternalId(this.instance);
  },
  
  getTrack: (){
    if (this._isTrack){
      return classSystem.getTrack(this.instance);
    };
    return (){};
  },
  
  isServe: (){
    return classSystem.isServe(this.type);
  },
  
  getInstanceAsType: (parType){
    if (!classSystem.canSet(parType, this.type)){
      throw errorMsg.typeMissmatch;
    };
    if (classSystem.isTemporaryTrackedClass(parType)){
      var track = this.getTrack();
      this.extraTracks.push(track);
      return [this.instance, track];
    };
    return this.instance;
  },
  
  // this helps us to avoid some spagetti code in error handling
  // when an argument array is partially built up and a error ocurs
  // we can call this function to have a clear clean up
  clearExtraTracks: (){
    var i = 0;
    for (i = 0; i < this.extraTracks.length; ++i){
      try{
        this.extraTracks[i]();
      }catch(e){};
    };
  }
  
  
};

return DynInstance;

