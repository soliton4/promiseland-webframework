var classSystem = promiseland.classSystem;

var basics = require "./basics";
var errorFun = basics.errorFun;
var errorMsg = basics.errorMsg;
var _stringEncodeStr = basics._stringEncodeStr;
var stringEncodeStr = basics.stringEncodeStr;

var VariableNames = basics.VariableNames;
var mixin = basics.mixin;
var identifierName = basics.identifierName;
var checkIsFunction = basics.checkIsFunction;
var getExtraFromPar = basics.getExtraFromPar;
var statementType = basics.statementType;
var checkPromising = basics.checkPromising;


var asm = require "./imported/asm";



return (parInstance, par){

  var f = (par){

    this.checkAsm = (parResult, parStr){
      
      if (!parStr){
        return;
      };
      
      try{
        var validation = asm.validate(parStr);
      }catch(e){
        this.warning(parResult.getParsed(), errorMsg.asmValidationFailed);
      };
      
    };
    
    this.isAsmFun = (parsed){
      if (!parsed || !parsed.body){
        return false;
      };
      
      var body = parsed.body;
      if (body.body){
        body = body.body;
      };
      if (!body.length){
        return false;
      };
      
      var first = body[0];
      if (first.type == "ExpressionStatement"){
        var expression = first.expression;
        if (expression && expression.type == "Literal" && typeof expression.value == "string" && expression.value == "use asm"){
          first.asmIgnore = true;
          return true;
        };
      };
      return false;
    };
    

  };
  f.apply(parInstance, [par]);

};