
var md5 = require "./md5";
var _parser = require "./_parser";

var basics = require "./basics";
var errorFun = basics.errorFun;
var errorMsg = basics.errorMsg;
var _stringEncodeStr = basics._stringEncodeStr;
var stringEncodeStr = basics.stringEncodeStr;

var VariableNames = basics.VariableNames;
var mixin = basics.mixin;
var identifierName = basics.identifierName;
var checkIsFunction = basics.checkIsFunction;

var getExtraFromPar = basics.getExtraFromPar;
var addExtraToPar = basics.addExtraToPar;
var statementType = basics.statementType;
var checkPromising = basics.checkPromising;

var findPromises = basics.findPromises;

var loader = require "./loader";


var parseFunctionModule = require "./parseFunction";
var variablesModule = require "./variables";
var typesModule = require "./types";
var expressionsModule = require "./expressions";
var dynamicModule = require "./dynamic";

var asmModule = require "./asm";


/* debugging flags
*/

var _pureCode = false;

var Promise = promiseland.Promise;

var classSystem = promiseland.classSystem;

/*var statementType = {
  builtin: true
  , statement: true
};*/
var varType = classSystem.getBuiltinType("var");


var globalNewPromiseStr = function(){
  return "new __Promise()";
};


var Map = promiseland.Map;

    
    
    
    
    
var _Result = require "./Result";
    
    
    /* internal parser object */
    
    var CodeParser = function(par){
      var self = this;
      this.toParse = par.toParse;
      this.dynamicCode = par.dynamicCode;
      this.hashStr = par.hashStr;
      
      this.asmMode = par.asmMode || false;
      
      // initialization
      if (par._locals){
        for (var i in par._locals){
          this[i] = par._locals[i];
        };
      };
      
      if (par.common){
        this.common = par.common;
      }else{
        this.common = {
          givenTypeNames: {},
          errors: [],
          uniquebasis: par.uniquebasis || {
            index: 1
          },
          parsingConfig: par.parsingConfig
        };
        this.common.variableNames = new VariableNames({
          getUniqueName: (name){
            return self.getUniqueName(name);
          }
        });
      };
      
      this.errors = this.common.errors;
      
      this.newPromiseStr = function(){
        this.common.usePromise = true;
        return globalNewPromiseStr();
      };
      
      
      typesModule(this, par);
      
      /* flags */
      
      this.algorithmicCode = false;
      
      /* used to stack / unstack flags */
      
      this.stack = function(parStr){
        var stackNameStr = "_stack_" + parStr;
        if (!this[stackNameStr]){
          this[stackNameStr] = [];
        };
        this[stackNameStr].push(this[parStr]);
      };
      this.unstack = function(parStr){
        var stackNameStr = "_stack_" + parStr;
        this[parStr] = this[stackNameStr].pop();
      };
      
      
      /* main function */
      
      this._start = function(){
        if (this.toParse){
          if (this.toParse.type == "Program"){
            var tempRes = this.makeCompleteStatement(this.parseProgram(this.toParse));
            tempRes.push(";");
            this.result = this.makeCompleteStatement(tempRes);
          }else if (checkIsFunction(this.toParse)){
            this.functionRes = this.parseFunction(this.toParse);
            this.result = this.makeCompleteStatement(this.functionRes);
          };
        };
      };
      
      
      this.makeCompleteStatement = function(par){
        var res = this.newResult();
        res.setComplete();
        res.push(par);
        return res;
        
      };
      
      
        
      variablesModule(this, par);
      
        
      
      
      
      // errors
      
      
      this._getErrors = function(parWarning){
        var a = [];
        var i = 0;
        for (i = 0; i < this.errors.length; ++i){
          if (this.errors[i].valid){
            if (this.errors[i].dbgFun){
              try{
                this.errors[i].dbgFun();
              };
            };
            if (parWarning ? this.errors[i].warning : !this.errors[i].warning){
              a.push(this.errors[i]);
            };
          };
        };
        return a;
      };
      
      this.getWarnings = function(){
        return this._getErrors(true);
      };
      this.getErrors = function(){
        return this._getErrors(false);
      };
      
      this.getWarningFun = function(par){
        var self = this;
        return function(err){
          self.warning(par, err);
        };
      };
      
      this.warning = function(par, err){
        if (!par.line){
          errorFun({}, errorMsg.internalParserInfoMissing);
        };
        this.addWarning(par, err);
      };
      
      this.error = function(par, err){
        this._addError(par, err);
        errorFun(par, err);
      };
      this.addError = function(par, err, dbgFun){
        return this._addError(par, err, false, dbgFun);
      };
      this.addWarning = function(par, err){
        return this._addError(par, err, true);
      };
      this._addError = function(par, err, warning, dbgFun){
        var entry = {
          par: par,
          line: par.line,
          column: par.column,
          msg: err.id + ": " + err.msg,
          valid: true,
          warning: warning,
          dbgFun: dbgFun
        };
        this.errors.push(entry);
        var ps = new Promise();
        ps.then(function(){
          entry.valid = false;
        });
        return ps;
      };
      
      /*
        you can pass a optional promise.
        when the promise gets resolved, the result is replaced with the resolved value
        and the warning gets removed
      */
      this.runtimeError = function(par/*parsed entry*/, par2/*error msg*/){
        var ps = this.addWarning(par, par2);
        
        var res = this.runtimeErrorNoWarning(par2);
        res.setPromise(ps);
        //this.getWarningFun(par)(par2);
        return res;
      };
      
      this.runtimeErrorNoWarning = function(par2){
        var res = this.newResult();
        res.push("(function(){ throw { id:" + par2.id + ", msg: " + stringEncodeStr(par2.msg) + " } })()");
        return res;
      };
      
      
      
      
      /* results */
      
      this.getFunctionRes = function(){
        return this.functionRes;
      };
      
      this.getFunctionName = function(){
        return this.functionName;
      };
      
      
      this.getResult = function(){
        return this.result;
      };
      
      
      this.result = "";
      
      
      
      
      
      
      /*
        complete program
      */
      this.parseProgram = function(par){
        findPromises(par);
        var res = this.newResult();
        
        var extraRes = this.newResult();
        extraRes.push("\"use strict\";");
        extraRes.push(this.newLine());
        addExtraToPar(par, "addFront", extraRes);
        
        
        var extraModules = new Map();
        var parsingConfig = this.common.parsingConfig;

        if (parsingConfig){
          var reqireProperty = this.getTemplateProperty(parsingConfig, "require", "ObjectExpression");
          if (reqireProperty){
            extraModules = this.getTemplateRequireProperty(reqireProperty);
          };
          var nameProperty = this.getTemplateProperty(parsingConfig, "name", "Literal");
          if (nameProperty){
            this.common.name = nameProperty;
          };
        };
        this.common.extraModules = extraModules;
        
        
        if (checkPromising(par)){
          this.programPromiseStr = this.getUniqueName();
        };
        
        this.resultNameStr = this.getUniqueName();
        
        var functionStatement = this._parseFunction(par, { promiseName: this.programPromiseStr, noUntrack: true });
        
        var name;
        this.usedVariablesMap.forEach((value, name){
          if (value === true){
            if (name == "Promise"){
              this.common.usePromise = true;
            };
            if (name == "Callback"){
              this.common.useCallback = true;
            };
            if (name == "Map"){
              this.common.useMap = true;
            };
            if (extraModules.get(name)){
              return;
            };
            res.push("var " + this.getVariableName(name) + ";");
            res.push("try{");
            res.push(this.getVariableName(name));
            res.push(" = ");
            res.push(name);
            res.push(";}catch(e){};");
            res.push(this.newLine());
          };
        }, this);
        
        
        res.push("var " + this.resultNameStr + " = (");
        res.push(this.makeCompleteStatement(functionStatement));
        res.push(")();");
        res.push(this.newLine());
        
        return res;
      };
      
      
      
      parseFunctionModule(this, par);
        
        
        
        // template parsing
      
      
      this.getTemplateProperty = function(parTemplate, parProperty, mandatoryType){
        var i = 0;
        for (i; i < parTemplate.properties.length; ++i){
          var p = parTemplate.properties[i];
          if (p.kind == "init" && identifierName(p.key) == parProperty){
            if (mandatoryType){
              if (p.value.type != mandatoryType){
                this.error(p.value, errorMsg.templateSyntaxError);
              };
            };
            return p.value;
          };
        };
      };
      
      this.getTemplateRequireProperty = function(parTemplate){
        var i = 0;
        var res = new Map();
        for (i; i < parTemplate.properties.length; ++i){
          var p = parTemplate.properties[i];
          if (p.kind == "init"){
            var key = identifierName(p.key);
            if (p.value.type != "Literal"){
              this.error(p.value, errorMsg.templateSyntaxError);
            };
            res.set(key, p.value.value);
          };
        };
        return res;
      };
        
      
      


        
      expressionsModule(this, par);
      
      dynamicModule(this, par);
        
      
      
      this.getModuleHashStr = function(){
        return this.hashStr || "unknownhash";
      };
        
        
        
        // code generation control
      
      
      this.makeStatement = function(par){
        var statementRes = this.newResult();
        statementRes.setStatement();
        statementRes.push(par);
        statementRes.push(";");
        return statementRes;
      };
      
      
      
      this.newLine = (){
        var res = this.newResult();
        res._newLine = true;
        return res;
      };
      
      this.indent = (parRes){
        var res = this.newResult();
        res._indent = true;
        if (parRes){
          res.push(parRes);
        };
        return res;
      };
        
      // add newline in front and back of the statements
      this.indentNewLine = (parRes){
        var res = this.newResult();
        
        var indentRes = this.newResult();
        indentRes.push(this.newLine());
        indentRes.push(parRes);
        
        res.push(this.indent(indentRes));
        res.push(this.newLine());
        
        return res;
      };

        
      this.getIndentPair = (){
        var start = this.newResult();
        var end = this.newResult();
        start._indentPair = true;
        start._isIndentStart = true;
        start._end = end;
        end._indentPair = true;
        end.isIndentEnd = true;
        end._start = start;
        
        return {
          start: start,
          end: end
        };
      };
      
      
      this.newResult = function(par){
        var r = new _Result({
          cp: this
        });
        if (par){
          r.push(par);
        };
        return r;
      };
      
      
      this.getUniqueName = function(name){
        var retStr = "PL$" + this.common.uniquebasis.index++;
        if (name){
          retStr += "/*" + name + "*/";
        };
        return retStr;
      };
      
      
      
      
      // make a new instance of parser for subfunctions etc.
      
      this.newInstance = function(element, extras){
        var param = {
          toParse: element
          , common: this.common
          , hashStr: this.hashStr
          , types: this.types
          , variables: this.variables
          , _locals: {
            inheritedSystem: this.inheritedSystem,
            isClassObject: this.isClassObject
          }
        };
        if (extras){
          var i;
          for (i in extras){
            param[i] = extras[i];
          };
        };
        var instance = new CodeParser(param);
        return instance;
      };
        
        
      
      

      
      
      
      
      
      
      this.isCallableType = function(){
        
      };
      
      
      
      this.getFunctionArgumentCount = function(parType, parsed){
        return classSystem.getFunctionArgumentCount(parType);
      };
      
      
      asmModule(this, par);
      
      
      this._start();
      
    };
    
    
    var promiselandRequireStr = function(){
      return "";
    };
    var callbackRequireStr = function(){
      return "var Callback = promiseland.Callback;\n";
    };
    var mapRequireStr = function(){
      return "var Map = promiseland.Map;\n";
    };
    
    var loaderEndStr = function(par){
      if (par.promiseLandModule){
        return "}; return function(){ return __execute.apply(null, arguments); } });\n})();";
      }else{
        return "});\n})();";
      };
    };
    
    
    
    
    var createLoader = function(par){
      if (_pureCode){
        return par.mainPartStr;
      };
      var resStr = "";
      
      
      var loaderParam = {
        usePromise: par.usePromise,
        useRequire: par.useRequire,
        useClassSystem: par.useClassSystem,
        extraModules: par.extraModules,
        variableNames: par.variableNames,
        hashStr: par.hashStr
      };
      
      if (par.makePromiseLandModule){
        loaderParam.promiseLandModule = true;
      };
      var loaderJsn = loader(loaderParam);
      resStr += loaderJsn.headerStr;
      resStr += promiselandRequireStr();
      if (par.useCallback){
        resStr += callbackRequireStr();
      };
      if (par.useMap){
        resStr += mapRequireStr();
      };
      
      resStr += "if (promiseland._hasModule({ hashStr: \"" + par.hashStr + "\" })){ return promiseland._getModule(\"" + par.hashStr + "\"); };\n";
      
      resStr += par.mainPartStr;
      
      resStr += loaderJsn.footerStr;
      
      return resStr;
    };
    
    var createFooter = function(par){
      if (_pureCode){
        return "";
      };
      var resStr = "";
      
      if (par.makePromiseLandModule){
        resStr += loaderEndStr({
          promiseLandModule: true
        });
      }else{
        resStr += loaderEndStr({});
      };
      return resStr;
    };
    
    
    /* 
      the main parser object
    */
    
    var parser = {
      parse: function(promiselandCodeStr){
        var p = new promiseland.Promise();
        var parser = _parser;
        var hashStr = md5(promiselandCodeStr);
        var parsed = parser.parse(promiselandCodeStr);
        var resStr = "";
        var cp;
        var res = {};
        if (parsed.length === undefined){
          if (parsed.type == "Program"){
            var parsingConfig = parsed.config;
            
            cp = new CodeParser({
              toParse: parsed, 
              hashStr: hashStr,
              parsingConfig: parsingConfig
            });
            
            var makePromiseLandModule = false;
            var extraModules = cp.common.extraModules;
            var variableNames = cp.common.variableNames;
            
            if (parsingConfig){
              makePromiseLandModule = cp.getTemplateProperty(parsingConfig, "__promiseLandModule", "Literal");
              if (makePromiseLandModule && makePromiseLandModule.value === true){
                makePromiseLandModule = true;
              }else{
                makePromiseLandModule = false;
              };
            };
            var result = cp.getResult();
            var programStr = result.getProgramCodeStr();
            res.warnings = cp.getWarnings();
            res.errors = cp.getErrors();
            
            
            var mainPartStr = "";
            
            if (_pureCode){
              resStr = programStr;
              
            }else{
              if (cp.programPromiseStr){
                // promising module
                mainPartStr += "var " + cp.programPromiseStr + " = " + cp.newPromiseStr() + ";\n";
                mainPartStr += "promiseland._registerModule({ hashStr: \"" + hashStr + "\", \"module\": " + cp.programPromiseStr + ", promising: true });\n";
                mainPartStr += programStr;
                mainPartStr += ";\nreturn " + cp.programPromiseStr;
              }else{
                mainPartStr += programStr;
                // no need to register non promising modules
                // #requireMagic
                //mainPartStr += "promiseland._registerModule({ hashStr: \"" + hashStr + "\", \"module\": " + cp.resultNameStr + ", promising: false });\n";
                mainPartStr += "return " + cp.resultNameStr + ";\n";
              };

              resStr += createLoader({
                makePromiseLandModule: makePromiseLandModule,
                extraModules: extraModules,
                variableNames: variableNames,
                hashStr: hashStr,
                usePromise: cp.common.usePromise,
                useRequire: cp.common.useRequire,
                useCallback: cp.common.useCallback,
                useMap: cp.common.useMap,
                useClassSystem: cp.common.useClassSystem,
                mainPartStr: mainPartStr
              });
              
            };
          }else{
            this.error(parsed, errorMsg.unknownType);
          };

        }else{
          errorFun(parsed, errorMsg.severalProgramElements);
        };
        if (!(res.errors && res.errors.length)){
          res.javascript = resStr;
        };
        p.resolve(res);

        return p.promise;
      }
    };
    
    
    
    return parser;
    


